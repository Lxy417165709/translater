产生式   Production
	代表符号 leftNonTerminator
	产生句 Sentence
		符号 Symbols

符号 Symbols: 包括  终结符		Terminator
					非终结符	nonTerminator
					空符		blankSymbol
					结束符		endSymbol


单词 word: 包括 fixedWord  固定单词 如 关键字、操作符...
				variableWord  可变单词 如 整数、标识符...

单词 word 由 char组成
    char 包括
        特殊字符 specialChar (能匹配多种、多个字符)
                包括 fixedChar 代表 关键字、操作符...的字符
                     variableChar 代表 整数、标识符...的字符
        普通字符 ordinaryChar (只能匹配一个字符)
        附加字符 additionalChar (与特殊字符、普通字符配合使用) 如 + 匹配一或多次，* 匹配零或多次
特殊字符表 specialCharTable
         特殊字符表项 specialCharItem
                特殊字符 specialChar
                类型     type
                符号     symbol
                种别码标志 kindCodeFlag
                正则表达式  regexp
                    单词集 words

token 包括：
    种别码 kindCode
    值     value
    类型   type
    符号   symbol



配置层
测试层

语法层 语法树的构建
文法层 FIRST集、F、S 状态表的构建
词法层              给出symbols，构建状态机。
状态机层            NFABuilder: 通过给定的特殊符集(symbols)，构建出状态机。
                    NFA: 识别TOKEN
正则层 提供特殊符与匹配的关系






token {
    类型
    种别码
    值
}



specialCharTable{
    specialCharItems []*specialCharItem
}
specialCharItem{
    specialChar
    type
    kindCodeFlag
    regexp
}




给出特殊字符表。


(通过配置)将为给出特殊字符集，如 WIZ，
NFABuilder 构建W I Z 的自动机，最后进行并联
    构建W的自动机，首先要获取对应匹配的单词
    构建自动机过程中，涉及到特殊字符的转换(依赖特殊字符表)
构建完毕后，通过给定文本，得出所有的TOKEN




使用这个NFA进行TOKEN的获取，
通过TOKEN的种别码，得出其symbol (产生新的结构体 newStruct)。


给出产生式表，得出该表的状态转换图。通过状态转换图对 newStructs 进行语法分析，构建语法树。

配置层 conf  (统领全局)

测试层 test
    -> 对 NFA 的测试
    -> 对 Syntax 的测试


语法层 syntax
    -> 语法分析器
        -> 状态表 1
词法层 lex
    -> 词法分析器 LU: terminatorPair
        -> terminatorPair解析器 LU: terminatorPair (实现将token->terminatorPair)
        -> token解析器        LU: token Token(实现将 wordPair->token)
正则层 grammar
    -> 自动机             LU: wordPair WordPair
        -> 特殊字符表         LU: specialChar byte



布尔型规定：
    用 is、can、have... 开头
    函数返回布尔型形时，只能返回bool形，不要返回err，内部的err使用panic

变量名规定：
    reading --> 只会读取，不会修改
    handling --> 会读取，且会修改其内部

类函数名规定：
    Show()          --> 进行标准输出
    Store()         --> 将信息存储到文件
    Form()          --> 用于形成类的成员
    Get()           --> 返回相应的值
    Init()          --> 用于 New 内 形成类成员，或者用在 包的初始化函数 内
    Remove()        --> 用于删除XXX，不会影响本体
    Delete()        --> 用于删除XXX，并会影响本体


测试规定:


包规定命名:
    不要用驼峰，如 helloWorld
    要一个单词说明问题，且全是小写字母

文件名规定:














